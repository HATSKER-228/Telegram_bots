import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ChatType
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import F

import os
from baby_data import register_user, unregister_user, get_stats, select_baby
from keep_alive import keep_alive
keep_alive()

QWERTY_TO_YTSUKEN: dict = {
	'@': '"', '#': '‚Ññ', '$': ';', '^': ':', '&': '?',
	'q': '–π', 'w': '—Ü', 'e': '—É', 'r': '–∫', 't': '–µ', 'y': '–Ω', 'u': '–≥', 'i': '—à', 'o': '—â', 'p': '–∑', '[': '—Ö',
	'{': '–•', ']': '—ó', '}': '–á',
	'a': '—Ñ', 's': '—ñ', 'd': '–≤', 'f': '–∞', 'g': '–ø', 'h': '—Ä', 'j': '–æ', 'k': '–ª', 'l': '–¥', ';': '–∂', ':': '–ñ',
	"'": '—î', '"': '–Ñ',
	'z': '—è', 'x': '—á', 'c': '—Å', 'v': '–º', 'b': '–∏', 'n': '—Ç', 'm': '—å', ',': '–±', '<': '–ë', '.': '—é', '>': '–Æ',
	'/': '.', '?': ','
}
YTSUKEN_TO_QWERTY: dict = dict([(value, key) for key, value in QWERTY_TO_YTSUKEN.items()])


def fix_qwerty(s: str) -> str:
	new: str = ''
	username = False
	for char in s:
		if char == '@':
			username = True
		elif char in ' []{};\':",./<>?':
			username = False
		if username:
			new += char
		else:
			new_char: str = QWERTY_TO_YTSUKEN.get(char if char in '{[}]:;"\'<,>.' else char.lower(), char)
			new += new_char.upper() if char.isupper() else new_char
	return new


def fix_ytsuken(s: str) -> str:
	new: str = ''
	for char in s:
		new_char: str = YTSUKEN_TO_QWERTY.get(char if char in '—Ö–•—ó–á–∂–ñ—î–Ñ–±–ë—é–Æ' else char.lower(), char)
		new += new_char.upper() if char.isupper() else new_char
	return new


def determinate_lang(text: str) -> str:
	s: set = set(text.lower())
	ua: set = set('–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ñ—ñ–≤–∞–ø—Ä–æ–ª–¥–∂—î—è—á—Å–º–∏—Ç—å–±—é')
	if len(s.intersection(ua)):
		return 'ua'
	return 'eng'


bot = Bot(token=os.environ.get('TOKEN'))
dp = Dispatcher()


@dp.message(Command('start'), F.chat.type == ChatType.PRIVATE)
async def cmd_start_private(message: Message) -> None:
	await message.answer('–ü—Ä–∏–≤—ñ—Ç, –ø—É–ø—Å–∏–∫—É ‚ù§Ô∏è. –Ø - Unicorn Bot. –¢–∏ –º–æ–∂–µ—à –ø–æ–±–∞—á–∏—Ç–∏, —â–æ —è –≤–º—ñ—é —Ä–æ–±–∏—Ç–∏, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /help.')


@dp.message(Command('start'), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def cmd_start_group(message: Message) -> None:
	await message.answer('–ü—Ä–∏–≤—ñ—Ç, –ø—É–ø—Å–∏–∫–∏ ‚ù§Ô∏è. –Ø - Unicorn Bot. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏, —â–æ —è –≤–º—ñ—é —Ä–æ–±–∏—Ç–∏, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /help@PyUnicornBot.')


@dp.message(Command('help'))
async def cmd_help(message: Message) -> None:
	await message.answer('''–û—Å—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —â–æ —è –≤–º—ñ—é:
/start - –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è—á–∫–∞ –≤—ñ–¥ –º–µ–Ω–µ
/help - –Ω–∞–¥—ñ—à–ª—é –æ—Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/fix - –≤–∏–ø—Ä–∞–≤–ª—é —Ä–æ–∑–∫–ª–∞–¥–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑ qwerty –Ω–∞ –π—Ü—É–∫–µ–Ω, –∞–±–æ –∂ –Ω–∞–≤–ø–∞–∫–∏)

<b>!!!–¢—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ!!!</b>
/baby_reg - –∑–∞—Ä–µ—î—Å—Ç—Ä—É—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–∞ –∑–≤–∞–Ω–Ω—è –ü—É–ø—Å–∏–∫–∞ –¥–Ω—è
/baby_unreg - –≤–∏–¥–∞–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–∞ –∑–≤–∞–Ω–Ω—è –ü—É–ø—Å–∏–∫–∞ –¥–Ω—è
/baby_select - –æ–±–µ—Ä—É –ü—É–ø—Å–∏–∫–∞ –¥–Ω—è (–ª–∏—à–µ —Ä–∞–∑ –≤ –¥–µ–Ω—å)
/baby_stats - –Ω–∞–¥—ñ—à–ª—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö—Ç–æ —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –±—É–≤ –ü—É–ø—Å–∏–∫–æ–º –¥–Ω—è''', parse_mode='HTML')


@dp.message(Command('fix'))
async def cmd_fix(message: Message) -> None:
	if message.reply_to_message and message.reply_to_message.text:
		text = message.reply_to_message.text
		fixed = fix_ytsuken(text) if determinate_lang(text) == 'ua' else fix_qwerty(text)
		await message.reply_to_message.reply(fixed)
	else:
		await message.reply('–®–∞–Ω–æ–≤–Ω–∏–π —Ç—É–ø–æ—Ä–∏–ª–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –≤–∏–¥—É <i>Homo Sapiens</i>, –∫–æ–º–∞–Ω–¥—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–∏—Å–∞—Ç–∏ —É –í–Ü–î–ü–û–í–Ü–î–¨ –Ω–∞ –¢–ï–ö–°–¢–û–í–ï –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üßå', parse_mode='HTML')


@dp.message(Command('baby_reg'), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def cmd_baby_reg(message: Message) -> None:
	user = message.from_user
	added = register_user(message.chat.id, user.id, user.username)
	if added:
		await message.reply(f'{user.full_name} —Ç–µ–ø–µ—Ä —É —Å–ø–∏—Å–∫—É –ø—É–ø—Å–∏–∫—ñ–≤! üê£')
	else:
		await message.reply('–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —è–∫ –ø—É–ø—Å–∏–∫ üòò')


@dp.message(Command('baby_unreg'), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def cmd_baby_unreg(message: Message) -> None:
	user = message.from_user
	deleted = unregister_user(message.chat.id, user.id, user.username)
	if deleted:
		await message.reply(f'{user.full_name} –ø–æ–∫–∏–Ω—É–≤ —Å–ø–∏—Å–æ–∫ –ø—É–ø—Å–∏–∫—ñ–≤ üò≠')
	else:
		await message.reply(f'{user.full_name} –Ω–µ –±—É–ª–æ –≤ —Å–ø–∏—Å–∫—É –ø—É–ø—Å–∏–∫—ñ–≤. –í–∞—Ä—Ç–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!')


@dp.message(Command('baby_select'), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def cmd_baby_play(message: Message) -> None:
	username, error = select_baby(message.chat.id)
	if error:
		await message.reply(error)
	else:
		await message.reply(f'üéâ –ü—É–ø—Å—ñ–∫ –¥–Ω—è ‚Äî @{username}!')


@dp.message(Command('baby_stats'), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def cmd_baby_stats(message: Message) -> None:
	data = get_stats(message.chat.id)
	if data:
		s = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ø—Å–∏–∫—ñ–≤ –¥–Ω—è:\n'
		for index, user_info in enumerate(data):
			row = f'{index+1}) {user_info[0]} - {user_info[1]}\n'
			s += row
		await message.reply(s)
	else:
		await message.reply('–£ —Ü—å–æ–º—É —á–∞—Ç—ñ —â–µ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –ø—É–ø—Å—ñ–∫—ñ–≤!')


async def main() -> None:
	await dp.start_polling(bot)


if __name__ == "__main__":
	asyncio.run(main())
