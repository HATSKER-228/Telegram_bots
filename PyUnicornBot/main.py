import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ChatType
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, User, FSInputFile
from aiogram import F
import shutil
import os
from random import randint
from baby_data import register_user, unregister_user, get_stats, select_baby, get_path, is_in_list, get_ids
from numbers_tools import create_game, join_to_game, set_player_number, cancel_game, guess_number, delete_game
from numbers_tools import get_opponent_id, get_guesses, get_user_finished, get_number, get_random_num
from keyboards import kb_join_game, kb_random_num, kb_submit_baby_unreg
from keep_alive import keep_alive
keep_alive()

QWERTY_TO_YTSUKEN: dict = {
    '@': '"', '#': '‚Ññ', '$': ';', '^': ':', '&': '?',
    'q': '–π', 'w': '—Ü', 'e': '—É', 'r': '–∫', 't': '–µ', 'y': '–Ω', 'u': '–≥', 'i': '—à', 'o': '—â', 'p': '–∑', '[': '—Ö',
    '{': '–•', ']': '—ó', '}': '–á',
    'a': '—Ñ', 's': '—ñ', 'd': '–≤', 'f': '–∞', 'g': '–ø', 'h': '—Ä', 'j': '–æ', 'k': '–ª', 'l': '–¥', ';': '–∂', ':': '–ñ',
    "'": '—î', '"': '–Ñ',
    'z': '—è', 'x': '—á', 'c': '—Å', 'v': '–º', 'b': '–∏', 'n': '—Ç', 'm': '—å', ',': '–±', '<': '–ë', '.': '—é', '>': '–Æ',
    '/': '.', '?': ','
}
YTSUKEN_TO_QWERTY: dict = dict([(value, key) for key, value in QWERTY_TO_YTSUKEN.items()])


def get_tag(user: User) -> str:
    return f'@{user.username}' if user.username else f'<a href="tg://user?id={user.id}">{user.full_name}</a>'


def get_link(user: User) -> str:
    return f'<a href="tg://user?id={user.id}">{user.full_name}</a>'


async def get_user_from_chat(chat_id: int, user_id: int) -> User:
    return (await bot.get_chat_member(chat_id, user_id)).user


def fix_qwerty(s: str) -> str:
    new: str = ''
    username = False
    for char in s:
        if char == '@':
            username = True
        elif char in ' []{};\':",./<>?':
            username = False
        if username:
            new += char
        else:
            new_char: str = QWERTY_TO_YTSUKEN.get(char if char in '{[}]:;"\'<,>.' else char.lower(), char)
            new += new_char.upper() if char.isupper() else new_char
    return new


def fix_ytsuken(s: str) -> str:
    new: str = ''
    for char in s:
        new_char: str = YTSUKEN_TO_QWERTY.get(char if char in '—Ö–•—ó–á–∂–ñ—î–Ñ–±–ë—é–Æ' else char.lower(), char)
        new += new_char.upper() if char.isupper() else new_char
    return new


def determinate_lang(text: str) -> str:
    s: set = set(text.lower())
    ua: set = set('–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ñ—ñ–≤–∞–ø—Ä–æ–ª–¥–∂—î—è—á—Å–º–∏—Ç—å–±—é')
    if len(s.intersection(ua)):
        return 'ua'
    return 'eng'


bot = Bot(token=os.environ.get('TOKEN'))
dp = Dispatcher()


@dp.message(Command('start'), F.chat.type == ChatType.PRIVATE)
async def cmd_start_private(message: Message) -> None:
    await message.answer(
        '–ü—Ä–∏–≤—ñ—Ç, –ø—É–ø—Å–∏–∫—É ‚ù§Ô∏è. –Ø - Unicorn Bot. –¢–∏ –º–æ–∂–µ—à –ø–æ–±–∞—á–∏—Ç–∏, —â–æ —è –≤–º—ñ—é —Ä–æ–±–∏—Ç–∏, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /help.')


@dp.message(Command('start'), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def cmd_start_group(message: Message) -> None:
    await message.answer(
        '–ü—Ä–∏–≤—ñ—Ç, –ø—É–ø—Å–∏–∫–∏ ‚ù§Ô∏è. –Ø - Unicorn Bot. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏, —â–æ —è –≤–º—ñ—é —Ä–æ–±–∏—Ç–∏, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –∫–æ–º–∞–Ω–¥—É /help@PyUnicornBot.')


@dp.message(Command('help'))
async def cmd_help(message: Message) -> None:
    await message.answer('''–û—Å—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —â–æ —è –≤–º—ñ—é:
/start - –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è—á–∫–∞ –≤—ñ–¥ –º–µ–Ω–µ
/help - –Ω–∞–¥—ñ—à–ª—é –æ—Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/fix - –≤–∏–ø—Ä–∞–≤–ª—é —Ä–æ–∑–∫–ª–∞–¥–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑ qwerty –Ω–∞ –π—Ü—É–∫–µ–Ω, –∞–±–æ –∂ –Ω–∞–≤–ø–∞–∫–∏)
/shypko - –æ—Ü—ñ–Ω—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ 0 –¥–æ 10
/rules - –Ω–∞–¥—ñ—à–ª—é –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–∂–Ω–æ—ó –º—ñ–Ω—ñ–≥—Ä–∏

<b>!!!–¢—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ!!!</b>
<u>–ü—É–ø—Å–∏–∫ –¥–Ω—è</u>
/baby_reg - –¥–æ–¥–∞–º —Ç–µ–±–µ —É —Å–ø–∏—Å–æ–∫ –ü—É–ø—Å–∏–∫—ñ–≤
/baby_unreg - –≤–∏–¥–∞–ª—é —Ç–µ–±–µ –∑ –ü—É–ø—Å–∏–∫—ñ–≤
/baby_select - –æ–±–µ—Ä—É –ü—É–ø—Å–∏–∫–∞ –¥–Ω—è (–ª–∏—à–µ —Ä–∞–∑ –≤ –¥–µ–Ω—å)
/baby_stats - –Ω–∞–¥—ñ—à–ª—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö—Ç–æ —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –±—É–≤ –ü—É–ø—Å–∏–∫–æ–º –¥–Ω—è
/all - –ø–æ–∫–ª–∏—á—É —É—Å—ñ—Ö –ü—É–ø—Å–∏–∫—ñ–≤ —É —á–∞—Ç

<u>–ì—Ä–∞ "–ß–∏—Å–ª–∞"</u>
/create - —Å—Ç–≤–æ—Ä—é –≥—Ä—É
/guess [—á–∏—Å–ª–æ] - –Ω–∞–¥—ñ—à–ª—é —Ç–æ–±—ñ –ø—ñ–¥–∫–∞–∑–∫—É, —â–æ–± –≤—ñ–¥–≥–∞–¥–∞—Ç–∏ —á–∏—Å–ª–æ —Å—É–ø–µ—Ä–Ω–∏–∫–∞
/cancel - —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≥—Ä—É''', parse_mode='HTML')


@dp.message(Command('fix'))
async def cmd_fix(message: Message) -> None:
    if message.reply_to_message and message.reply_to_message.text:
        text = message.reply_to_message.text
        fixed = fix_ytsuken(text) if determinate_lang(text) == 'ua' else fix_qwerty(text)
        await message.reply_to_message.reply(fixed)
    else:
        await message.reply('–®–∞–Ω–æ–≤–Ω–∏–π —Ç—É–ø–æ—Ä–∏–ª–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –≤–∏–¥—É <i>Homo Sapiens</i>, –∫–æ–º–∞–Ω–¥—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–∏—Å–∞—Ç–∏ —É '
                            '–í–Ü–î–ü–û–í–Ü–î–¨ –Ω–∞ –¢–ï–ö–°–¢–û–í–ï –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üßå', parse_mode='HTML')


@dp.message(Command('shypko'))
async def cmd_shypko(message: Message) -> None:
    if message.reply_to_message:
        await message.reply_to_message.reply(f'–Ø –æ—Ü—ñ–Ω—é—é —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ {randint(0, 10)} —à–∏–ø–∫–æ –∑ 10.')
    else:
        await message.reply('–®–∞–Ω–æ–≤–Ω–∏–π —Ç—É–ø–æ—Ä–∏–ª–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –≤–∏–¥—É <i>Homo Sapiens</i>, –∫–æ–º–∞–Ω–¥—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–∏—Å–∞—Ç–∏ —É '
                            '–í–Ü–î–ü–û–í–Ü–î–¨ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üßå', parse_mode='HTML')


@dp.message(Command('rules'))
async def cmd_rules(message: Message) -> None:
    text = '''üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –º—ñ–Ω—ñ—ñ–≥–æ—Ä</b>
üë∂ <i>–ü—É–ø—Å–∏–∫ –¥–Ω—è:</i>
‚Ä¢ –©–æ–± –¥–æ–ª—É—á–∏—Ç–∏—Å—è, –Ω–∞–ø–∏—à–∏ –º–µ–Ω—ñ /baby_reg.
‚Ä¢ –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—à ‚Äî –≤–∏–π–¥–∏ –∑ –≥—Ä–∏ –∫–æ–º–∞–Ω–¥–æ—é /baby_unreg.
‚Ä¢ –Ø –º–æ–∂—É –æ–±—Ä–∞—Ç–∏ –ø—É–ø—Å–∏–∫–∞ –¥–Ω—è ‚Äî –¥–ª—è —Ü—å–æ–≥–æ –Ω–∞–ø–∏—à–∏ /baby_select.
‚Ä¢ –Ø –æ–±–∏—Ä–∞—é –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è –∑—ñ —Å–ø–∏—Å–∫—É, —ñ —Ä–æ–±–ª—é —Ü–µ –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å.
‚Ä¢ –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è, —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ —Ö—Ç–æ —Å—Ç–∞–≤–∞–≤ –ø—É–ø—Å–∏–∫–æ–º, –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ /baby_stats.
    
üéØ <i>–ì—Ä–∞ "–ß–∏—Å–ª–∞":</i>
‚Ä¢ –¶–µ –≥—Ä–∞ –¥–ª—è –¥–≤–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤, —è–∫—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –≤ –æ–¥–Ω—ñ–π –≥—Ä—É–ø—ñ.
‚Ä¢ –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É –º–æ–∂–Ω–∞ –∫–æ–º–∞–Ω–¥–æ—é /create.
‚Ä¢ –Ø —Å–∞–º –Ω–∞–ø–∏—à—É –∫–æ–∂–Ω–æ–º—É –∑ –≥—Ä–∞–≤—Ü—ñ–≤ —É –ø—Ä–∏–≤–∞—Ç —ñ –ø–æ–ø—Ä–æ—à—É –∑–∞–≥–∞–¥–∞—Ç–∏ 4-—Ü–∏—Ñ—Ä–æ–≤–µ —á–∏—Å–ª–æ –∑ —Ä—ñ–∑–Ω–∏—Ö —Ü–∏—Ñ—Ä.
‚Ä¢ –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—ñ –ø–æ —á–µ—Ä–∑—ñ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å –º–µ–Ω—ñ –∑–¥–æ–≥–∞–¥–∫–∏ –∫–æ–º–∞–Ω–¥–æ—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ /guess 1234.
‚Ä¢ –Ø —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—Å–∏–ª–∞—é –ø—ñ–¥–∫–∞–∑–∫—É:
    X ‚Äî —Ü–∏—Ñ—Ä–∞ —î —ñ —Å—Ç–æ—ó—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –º—ñ—Å—Ü—ñ.
    O ‚Äî —Ü–∏—Ñ—Ä–∞ —î, –∞–ª–µ —Å—Ç–æ—ó—Ç—å –Ω–µ —Ç–∞–º.
‚Ä¢ –í–∏–≥—Ä–∞—î —Ç–æ–π, —Ö—Ç–æ –ø–µ—Ä—à–∏–º –≤–≥–∞–¥–∞—î —á–∏—Å–ª–æ —Å—É–ø–µ—Ä–Ω–∏–∫–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é.
‚Ä¢ –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑—É–ø–∏–Ω–∏—Ç–∏ –≥—Ä—É ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å /cancel.
‚Ä¢ –í –æ–¥–Ω—ñ–π –≥—Ä—É–ø—ñ –º–æ–∂–µ –±—É—Ç–∏ –ª–∏—à–µ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≥—Ä–∞.'''
    await message.answer(text, parse_mode='HTML')


@dp.message(Command('baby_reg'))
async def cmd_baby_reg(message: Message) -> None:
    if message.chat.type == 'private':
        await message.reply('–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ üßå')
        return
    user = message.from_user

    added = register_user(message.chat.id, user.id, user.username)
    if added:
        await message.reply(f'{get_tag(user)} —Ç–µ–ø–µ—Ä —É —Å–ø–∏—Å–∫—É –ø—É–ø—Å–∏–∫—ñ–≤! üê£', parse_mode='HTML')
    else:
        await message.reply('–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —è–∫ –ø—É–ø—Å–∏–∫ üòò')


@dp.message(Command('baby_unreg'))
async def cmd_baby_unreg(message: Message) -> None:
    if message.chat.type == 'private':
        await message.reply('–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ üßå')
        return
    user = message.from_user
    in_list = is_in_list(message.chat.id, user.id)
    if not in_list:
        await message.reply(f'{get_tag(user)} –Ω–µ –±—É–ª–æ –≤ —Å–ø–∏—Å–∫—É –ø—É–ø—Å–∏–∫—ñ–≤. –í–∞—Ä—Ç–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!', parse_mode='HTML')
        return

    kb = kb_submit_baby_unreg(message.chat.id, user.id)
    await message.answer(f'{get_link(user)}, —Ç–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à –≤–∏–π—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É –ü—É–ø—Å–∏–∫—ñ–≤?', parse_mode='HTML', reply_markup=kb)
    await message.delete()


@dp.message(Command('baby_select'))
async def cmd_baby_select(message: Message) -> None:
    if message.chat.type == 'private':
        await message.reply('–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ üßå')
        return
    chat_id: int = message.chat.id
    is_successful, baby_id = select_baby(chat_id)
    if is_successful:
        baby = await get_user_from_chat(chat_id, baby_id)
        await message.answer(f'üéâ –ü—É–ø—Å–∏–∫ –¥–Ω—è ‚Äî {get_tag(baby)}!', parse_mode='HTML')
    elif baby_id:
        baby = await get_user_from_chat(chat_id, baby_id)
        await message.reply(f'–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –ø—É–ø—Å—ñ–∫ —É–∂–µ –æ–±—Ä–∞–Ω–∏–π: {get_tag(baby)}üíñ', parse_mode='HTML')
    else:
        await message.reply('–£ —Ü—å–æ–º—É —á–∞—Ç—ñ —â–µ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –ø—É–ø—Å—ñ–∫—ñ–≤üò¢')


@dp.message(Command('baby_stats'))
async def cmd_baby_stats(message: Message) -> None:
    if message.chat.type == 'private':
        await message.reply('–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ üßå')
        return
    data = get_stats(message.chat.id)
    if data:
        s = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü—É–ø—Å–∏–∫—ñ–≤ –¥–Ω—è:\n'
        for index, user_info in enumerate(data):
            if user_info[1]:
                row = f'{index+1}) {user_info[1]} - {user_info[2]}\n'
            else:
                user = await get_user_from_chat(message.chat.id, user_info[0])
                row = f'{index+1}) {user.full_name} - {user_info[2]} (–¥–æ–¥–∞–π —é–∑–µ—Ä–Ω–µ–π–º –±—É–¥—å –ª–∞—Å–∫–∞üôè)\n'
            s += row
        await message.reply(s)
    else:
        await message.reply('–£ —Ü—å–æ–º—É —á–∞—Ç—ñ —â–µ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –ü—É–ø—Å—ñ–∫—ñ–≤ üò¢')


@dp.message(Command('all'))
async def cmd_all(message: Message) -> None:
    if message.chat.type == 'private':
        await message.reply('–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ üßå')
        return
    data = get_ids(message.chat.id)
    if data:
        await message.answer('–ü—É–ø—Å–∏–∫–∏, –≤—Å—ñ —Å—é–¥–∏ ü§ó')
        text = ''
        count = 0
        for i, user_id in enumerate(data):
            user = await get_user_from_chat(message.chat.id, user_id)
            text += f'{get_tag(user)}\n'
            count += 1
            if count == 5:
                count = 0
                await message.answer(text, parse_mode='HTML')
                text = ''
        await message.answer(text, parse_mode='HTML')
    else:
        await message.reply('–£ —Ü—å–æ–º—É —á–∞—Ç—ñ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –ü—É–ø—Å–∏–∫—ñ–≤, —è–∫–∏—Ö —è –º—ñ–≥ –±–∏ –ø–æ–∫–ª–∏–∫–∞—Ç–∏ üò¢')


@dp.message(Command('create'))
async def cmd_numbers_create_game(message: Message) -> None:
    if message.chat.type == 'private':
        await message.reply('–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ üßå')
        return

    chat_id = message.chat.id
    user_id = message.from_user.id

    is_successful = create_game(chat_id, user_id)
    if is_successful:
        await message.reply(f'üî¢{get_link(message.from_user)} —Ö–æ—á–µ –∑—ñ–≥—Ä–∞—Ç–∏ –≤ –ß–∏—Å–ª–∞!\n–¢–∏–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá',
                            reply_markup=kb_join_game(chat_id, user_id), parse_mode='HTML')
    else:
        await message.reply('–£ —Ü—å–æ–º—É —á–∞—Ç—ñ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≥—Ä–∞.')


@dp.message(Command('cancel'))
async def cmd_numbers_cancel(message: Message) -> None:
    if message.chat.type == 'private':
        await message.reply('–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ üßå')
        return

    reply = cancel_game(message.chat.id)
    await message.answer(reply)


@dp.message(Command('guess'))
async def cmd_numbers_guess(message: Message) -> None:
    if message.chat.type == 'private':
        await message.reply('–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø—ñ üßå')
        return

    chat_id = message.chat.id
    user = message.from_user

    _, *text = message.text.strip().split()
    is_successful, reply = guess_number(chat_id, user.id, text)

    if not is_successful:
        await message.reply(reply)
        return

    await message.reply(reply)
    await asyncio.sleep(1.5)

    str_opponent_id = get_opponent_id(chat_id, user.id)
    opponent = await get_user_from_chat(chat_id, int(str_opponent_id))

    opponent_link = get_link(opponent)
    user_link = get_link(user)

    user_guesses = get_guesses(chat_id, user.id)
    opponent_guesses = get_guesses(chat_id, opponent.id)

    user_attempts = user_guesses.count('\n')
    opponent_attempts = opponent_guesses.count('\n')

    user_finished = get_user_finished(chat_id, user.id)
    opponent_finished = get_user_finished(chat_id, opponent.id)

    if user_attempts == opponent_attempts:
        if user_finished:
            if opponent_finished:
                result = 'draw'
            else:
                result = 'user win'
        else:
            if opponent_finished:
                result = 'opponent win'
            else:
                result = 'continue'
    else:
        if user_finished:
            result = 'chance for draw'
        else:
            result = 'continue'

    match result:
        case 'user win':
            ending = ''
            if user_attempts == 1:
                ending = '—É'
            elif 2 <= user_attempts <= 4:
                ending = '–∏'
            await message.answer(
                f'ü•≥üéâ –ü–ï–†–ï–ú–û–ì–ê!\n{user_link} –≤–≥–∞–¥–∞–≤(-–ª–∞) —á–∏—Å–ª–æ –∑–∞ {user_attempts} —Å–ø—Ä–æ–±{ending}.\n'
                f'–ô–æ–≥–æ/–á—ó —á–∏—Å–ª–æ –±—É–ª–æ: {get_number(chat_id, user.id)}', parse_mode='HTML')
            delete_game(chat_id)

        case 'opponent win':
            ending = ''
            if opponent_attempts == 1:
                ending = '—É'
            elif 2 <= opponent_attempts <= 4:
                ending = '–∏'
            await message.answer(f'ü•≥üéâ –ü–ï–†–ï–ú–û–ì–ê!\n{opponent_link} –≤–≥–∞–¥–∞–≤(-–ª–∞) —á–∏—Å–ª–æ –∑–∞ {opponent_attempts} —Å–ø—Ä–æ–±{ending}.\n'
                                 f'–ô–æ–≥–æ/–á—ó —á–∏—Å–ª–æ –±—É–ª–æ: {get_number(chat_id, opponent.id)}', parse_mode='HTML')
            delete_game(chat_id)

        case 'draw':
            await message.answer('üèÅ –ù–Ü–ß–ò–Ø! –û–±–∏–¥–≤–∞ –≥—Ä–∞–≤—Ü—ñ –≤–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ –∑–∞ –æ–¥–Ω–∞–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± ü§ù')
            delete_game(chat_id)

        case 'chance for draw':
            ending = ''
            if user_attempts == 1:
                ending = '—É'
            elif 2 <= user_attempts <= 4:
                ending = '–∏'
            await message.answer(
                f'{user_link} —É–∂–µ –≤–≥–∞–¥–∞–≤(-–ª–∞) —á–∏—Å–ª–æ –∑–∞ {user_attempts} —Å–ø—Ä–æ–±{ending}, –∞–ª–µ {opponent_link} —â–µ –º–∞—î —à–∞–Ω—Å ü§î',
                parse_mode='HTML')

        case 'continue':
            await message.answer(f'–°–ø—Ä–æ–±–∏ {user_link}:\n' + user_guesses, parse_mode='HTML')
            await message.answer(f'üü¢–ß–µ—Ä–≥–∞ {opponent_link}', parse_mode='HTML')
            if opponent_attempts != 0:
                await message.answer(f'–°–ø—Ä–æ–±–∏ {opponent_link}:\n' + opponent_guesses, parse_mode='HTML')


@dp.callback_query(F.data.startswith('join_game'))
async def callback_join_game(callback: CallbackQuery) -> None:
    _, str_chat_id, str_creator_id = callback.data.split('/')
    chat_id = int(str_chat_id)
    creator_id = int(str_creator_id)
    joiner = callback.from_user

    is_successful, msg = join_to_game(chat_id, joiner.id, creator_id)

    if is_successful:
        creator = await get_user_from_chat(chat_id, creator_id)
        creator_tag = get_tag(creator)
        joiner_tag = get_tag(joiner)

        text = f'üü¢–û–ø–æ–Ω–µ–Ω—Ç –∑–Ω–∞–π—à–æ–≤—Å—è!\n{creator_tag} —Ç–∞ {joiner_tag} –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—ó —á–∏—Å–ª–∞ –º–µ–Ω—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—èü§ó'
        await callback.message.answer(text=text, parse_mode='HTML')
        await callback.message.delete()
        await callback.answer()

        instructions = (
            'üß† –ß–µ–∫–∞—é –≤–∞—à–µ 4-—Ü–∏—Ñ—Ä–æ–≤–µ —á–∏—Å–ª–æ!\n\n'
            '‚úÖ –ß–∏—Å–ª–æ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ:\n'
            '‚Ä¢ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 0\n'
            '‚Ä¢ –º–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ —Ü–∏—Ñ—Ä–∏\n\n'
            'üì© –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤.\n\n'
            '–ê–±–æ —Ç–∏–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —è —Å–∞–º –æ–±—Ä–∞–≤ –¥–ª—è —Ç–µ–±–µ —á–∏—Å–ª–æüëá'
        )
        await callback.bot.send_message(creator.id, instructions, reply_markup=kb_random_num())
        await callback.bot.send_message(joiner.id, instructions, reply_markup=kb_random_num())
    else:
        await callback.answer(text=msg, show_alert=True)


@dp.callback_query(F.data == 'gen_random_num')
async def callback_gen_random_num(callback: CallbackQuery) -> None:
    str_number = get_random_num()
    instructions = (
        'üß† –ß–µ–∫–∞—é –≤–∞—à–µ 4-—Ü–∏—Ñ—Ä–æ–≤–µ —á–∏—Å–ª–æ!\n\n'
        '‚úÖ –ß–∏—Å–ª–æ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ:\n'
        '‚Ä¢ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 0\n'
        '‚Ä¢ –º–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—ñ —Ü–∏—Ñ—Ä–∏\n\n'
        'üì© –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ —á–∏—Å–ª–æ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤.\n\n'
        f'–ú–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ —á–∏—Å–ª–æ <u>{str_number}</u>, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É —â–µ —Ä–∞–∑üëá'
    )
    await callback.message.edit_text(text=instructions, reply_markup=kb_random_num(), parse_mode='HTML')
    await callback.answer()


@dp.callback_query(F.data.startswith('baby_unreg'))
async def callback_baby_unreg(callback: CallbackQuery) -> None:
    _, action, str_chat_id, str_creator_id = callback.data.split('/')
    user = callback.from_user

    if user.id != int(str_creator_id):
        await callback.answer(text='–¶—ñ –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–ª—è —Ç–µ–±–µüßå', show_alert=True)
        return
    if action == 'decline':
        await callback.answer(text='–í–∏–∫–ª—é—á–µ–Ω–Ω—è —Ç–µ–±–µ –∑ –ü—É–ø—Å–∏–∫—ñ–≤ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ‚úÖ', show_alert=True)
        await callback.message.delete()
        return
    deleted = unregister_user(int(str_chat_id), int(str_creator_id))
    if deleted:
        await callback.answer('–¢–µ–±–µ –±—É–ª–æ –≤–∏–∫–ª—é—á–∏–Ω–æ –∑ –ü—É–ø—Å–∏–∫—ñ–≤üò¢', show_alert=True)
        await callback.message.answer(f'{get_link(user)} –ø–æ–∫–∏–Ω—É–≤ —Å–ø–∏—Å–æ–∫ –ü—É–ø—Å–∏–∫—ñ–≤üò≠', parse_mode='HTML')
        await callback.message.delete()
    else:
        await callback.answer(text='–¢–µ–±–µ –Ω–µ –±—É–ª–æ –≤ —Å–ø–∏—Å–∫—É –ø—É–ø—Å–∏–∫—ñ–≤. –í–∞—Ä—Ç–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!', show_alert=True)


@dp.message(Command('get_baby_stats'), F.chat.type == 'private', F.from_user.id == 1250738671)
async def admin_cmd_get_baby_stats(message: Message) -> None:
    file = FSInputFile(get_path())
    await message.answer_document(file, caption='–û—Å—å —Ñ–∞–π–ª –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –ø—É–ø—Å–∏–∫—ñ–≤ üë∂')


@dp.message(Command('upload_baby_stats'), F.chat.type == 'private', F.from_user.id == 1250738671)
async def admin_cmd_upload_baby_stats(message: Message) -> None:
    if not message.document:
        await message.answer('–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç.')
        return

    if not message.document.file_name.endswith('.json'):
        await message.answer('–¶–µ –º–∞—î –±—É—Ç–∏ JSON-—Ñ–∞–π–ª.')
        return

    file = await message.bot.get_file(message.document.file_id)
    await message.bot.download_file(file.file_path, 'temp_uploaded.json')

    shutil.move('temp_uploaded.json', get_path())

    await message.answer('–§–∞–π–ª –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.')


@dp.message(F.chat.type == 'private')
async def set_number(message: Message) -> None:
    user_id = message.from_user.id
    number_str = message.text.strip()

    success, reply, group_id, first_player_id = set_player_number(user_id, number_str)

    await message.answer(reply)

    if success and group_id is not None and first_player_id is not None:
        first_player = (await bot.get_chat_member(group_id, first_player_id)).user
        await message.bot.send_message(group_id, 'üéØ –û–±–∏–¥–≤–∞ –≥—Ä–∞–≤—Ü—ñ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —á–∏—Å–ª–∞! –ü–æ—á–∏–Ω–∞–π–º–æ –≥—Ä—É!')
        await message.bot.send_message(group_id, f'üü¢–ß–µ—Ä–≥–∞ {get_link(first_player)}\n'
                                                 f'üì©–ù–∞–¥—Å–∏–ª–∞–π —Å–ø—Ä–æ–±—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /guess [—Ç–≤–æ—è_–∑–¥–æ–≥–∞–¥–∫–∞]',
                                       parse_mode='HTML')


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
